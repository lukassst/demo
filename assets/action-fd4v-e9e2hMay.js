const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/dragDrop-BDTOEOzE.js","assets/index-CVwNq2Ey.js","assets/index-Dx7P_sCg.css"])))=>i.map(i=>d[i]);
import{u as C,d as h,v as w,p as N,s as L,_ as S,t as T,e as x}from"./index-CVwNq2Ey.js";import{r as _}from"./fractal-D3i6GnW3.js";function F(n,o){const e=C.createActionButton(n,o);return e.classList.add("panel-action-button"),e}function z(n){const o=document.createDocumentFragment(),e=document.createElement("div");e.style.fontSize="12px",e.style.marginTop=n===1?"0":"5px",e.style.marginBottom="2px",e.textContent=`Panel ${n}:`,e.style.display="block",o.appendChild(e);const a=document.createElement("div");a.style.display="flex",a.style.gap="5px",a.style.marginBottom="3px";const I=F("NIFTI",`panel-${n}-nifti`),u=F("DICOM",`panel-${n}-dicom`);return a.appendChild(I),a.appendChild(u),o.appendChild(a),{fragment:o,niftiButton:I,dicomButton:u}}async function E(n,o){try{const e=document.getElementById(`panel-${n}`);if(!e)throw new Error(`Panel ${n} not found`);await(o==="NIFTI"?T:x)(e,{sliceType:"axial"}),console.log(`Triggered ${o} load for panel ${n}`)}catch(e){console.error(`Error triggering ${o} load for panel ${n}:`,e),alert(`Error: ${e.message}`)}}const D={async setupFd4vGrid(){const n=await L(),{addDragDropToPanel:o}=await S(async()=>{const{addDragDropToPanel:e}=await import("./dragDrop-BDTOEOzE.js");return{addDragDropToPanel:e}},__vite__mapDeps([0,1,2]));return n.forEach((e,a)=>{const I=`panel-${a+1}`;o(e.panel,I)}),n},async handleFd4v(n,o){try{const t=await this.setupFd4vGrid();console.log("FD-4V grid setup complete with panels:",t)}catch(t){console.error("Error setting up FD-4V grid:",t),alert("Failed to initialize the 4-panel grid. Cannot proceed.");return}console.log("FD-4V"),n.style.display="none";const e=C.createActionButton("Load Sample","load-sample-fd4v");o.appendChild(e),e.addEventListener("click",async()=>{const t=["./data/1-ep2ddifftraDYNDISTCALCBVAL.nii.gz","./data/2-t2tsetra.nii.gz","./data/3-ep2ddifftraDYNDISTADC.nii.gz","./data/4-perfusion.nii.gz"];for(let l=0;l<4;l++){const c=l+1,r=`panel-${c}`,p=document.getElementById(r),f=t[l];if(!p){console.error(`Panel ${r} not found.`);continue}try{console.log(`Loading ${f} into ${r}...`);const g=await h.addFromFilename(f,r);if(g)await w.load([g],p,[{sliceType:"axial"}]),console.log(`Successfully loaded and displayed ${f} in ${r}`);else throw new Error("Volume loading returned no ID.")}catch(g){console.error(`Error loading sample for panel ${c}:`,g),alert(`Failed to load sample for panel ${c}. See console for details.`)}}});const a=document.createElement("div");a.className="fd4v-inputs",[[{name:"Resolution",type:"number",value:"1.5",step:"0.5"}],[{name:"Window Size",type:"number",value:"9"}],[{name:"Scales",type:"text",value:"1,2,3,4"}]].forEach(t=>{const l=C.createInputRow(t,"fd4v");a.appendChild(l)});const u=C.createActionButton("Calculate","fd4v-calculate");a.appendChild(u),u.addEventListener("click",async()=>{const t=parseFloat(document.getElementById("fd4v-resolution").value),l=parseInt(document.getElementById("fd4v-window-size").value);if(isNaN(t)||isNaN(l)||t<=0||l<=0){alert("Please enter valid positive numbers for Resolution and Window Size");return}const c=document.getElementById("fd4v-scales").value.trim(),r=N(c);if(r===null)return;console.log("FD4V Parameters:",{resolution:t,windowSize:l,scales:r});const p=[];for(let s=1;s<=4;s++){const i=document.getElementById(`panel-${s}`);if(i){const d=w.getVolumeIdForContainer(i),v=!!d;console.log(`Panel ${s} has volume data:`,v,d?`(Volume ID: ${d})`:""),v&&p.push({panelId:s,element:i,volumeId:d})}}if(console.log("Panels with volume data:",p),p.length===0){console.log("No volume data found in any panel");return}const f=[];for(const s of p){const i=s.panelId,d=s.volumeId;console.log(`Processing panel ${i} with volume ID: ${d}`);const v=await h.getVolume(d).image,$={resolution:t,windowSize:l,scales:r},{resampledImage:y,fdImage:B}=await _(v,$),P=await h.addFromItkImage(y,`resampled-${i}`),V=await h.addFromItkImage(B,`fdImage-${i}`);f.push({panelNumber:i,resampledVolumeId:P,fdVolumeId:V})}w.clear();const g=await this.setupFd4vGrid();for(const s of f){const i=`panel-${s.panelNumber}`,d=g.find(y=>y.panel&&y.panel.id===i);if(!d){console.error(`Could not find panel with ID ${i} in the newly created panels.`);continue}const v={sliceType:"axial",controlSection:!0,showVoxelCoordinates:!0,showWorldCoordinates:!0,showValue:!0,isOverlay:!1,isBaseVolume:!0},$={colormap:"nih",opacity:.5,cal_min:2,cal_max:3,sliceType:"axial",controlSection:!1,isOverlay:!0};await w.load([s.resampledVolumeId,s.fdVolumeId],d.panel,[v,$])}}),a.appendChild(u);const m=document.createElement("div");m.className="panel-controls",m.style.marginTop="5px",m.style.marginBottom="5px",m.style.lineHeight="1.2";for(let t=1;t<=4;t++){const{fragment:l,niftiButton:c,dicomButton:r}=z(t);c.addEventListener("click",()=>E(t,"NIFTI")),r.addEventListener("click",()=>E(t,"DICOM")),m.appendChild(l)}o.appendChild(m),o.appendChild(a)}},A=D.handleFd4v.bind(D);export{A as handleFd4v};
