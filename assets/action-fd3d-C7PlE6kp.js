import{s as R,v as c,u as y,a as T,b as V,d as m,p as P}from"./index-DbZOwx28.js";import{g as U,a as A}from"./fractal-DqPMPvjw.js";const G={handleFd3d(n,d){console.log("FD-3D"),c.clear(),this.setupFd3dGrid(),n.style.display="none";const l=document.createElement("div");l.className="fd3d-inputs";const p=[{name:"Dimension",type:"number",value:"64",step:"1"},{name:"Grid Size",type:"number",value:"16",step:"1"},{name:"Octaves",type:"number",value:"6",step:"1"},{name:"Amplitude",type:"number",value:"0.1",step:"0.1"}],L=y.createParamsGrid(p,"fd3d");l.appendChild(L),[[{name:"Window 1",type:"number",value:"7",step:"1"},{name:"Window 2",type:"number",value:"7",step:"1"}],[{name:"Scale 1",type:"text",value:"1,2,3"},{name:"Scale 2",type:"text",value:"1,2,3"}],[{name:"Method 1",type:"number",value:"0",step:"1"},{name:"Method 2",type:"number",value:"0",step:"1"}]].forEach(x=>{const f=y.createInputRow(x,"fd3d");l.appendChild(f)});const w=y.createActionButton("Calculate","fd3d-calculate");l.appendChild(w),d.appendChild(l),w.addEventListener("click",async()=>{try{await T()}catch(e){console.error(e),alert("Could not load TensorFlow.js. Please check the network connection and file path.");return}console.log("FD 3D Calculate button clicked"),c&&c.clear(),V&&V.clear();const f=(await this.setupFd3dGrid()).map(e=>e.panel).filter(e=>e);if(f.length!==4){console.error("Failed to find all 4 panels");return}const s=parseInt(document.getElementById("fd3d-dimension").value),M=parseInt(document.getElementById("fd3d-grid-size").value),$=parseInt(document.getElementById("fd3d-octaves").value),Q=parseFloat(document.getElementById("fd3d-amplitude").value),i=[s,s,Math.floor(s/4)],v=U({dims:i,gridSize:M,octaves:$,amplitude:Q});try{const e={dimensions:i},t=`fractal3d-${s}-${M}-${$}`;await m.addFromArray(v,e,t),console.log(`Created volume with ID: ${t}`),await c.load(t,f[0],{colormap:"gray",controlSection:!0}),console.log("Loaded generated 3D volume into panel-1")}catch(e){console.error("Failed to create or load fractal volume:",e);return}const k=document.getElementById("fd3d-scale-1").value.trim(),q=document.getElementById("fd3d-scale-2").value.trim(),D=P(k),S=P(q),o=parseInt(document.getElementById("fd3d-method-1").value),a=parseInt(document.getElementById("fd3d-method-2").value),I=parseInt(document.getElementById("fd3d-window-1").value),C=parseInt(document.getElementById("fd3d-window-2").value);if(D===null||S===null)return;console.log("Calculating fractal dimensions using TensorFlow and CPU...");const z={windowSize:I,scales:D,method:o},_={windowSize:C,scales:S,method:a};console.time(`FD3D-Method${o} Calculation`);const g=A(v,i,z);console.timeEnd(`FD3D-Method${o} Calculation`),console.time(`FD3D-Method${a} Calculation`);const u=A(v,i,_);console.timeEnd(`FD3D-Method${a} Calculation`);const[j,E,b,B]=f;if(b&&g)try{const e=await m.addFromArray(g,{dimensions:i},`fd3d-method${o}-${s}-${I}`);await c.load(e,b,{colormap:"nih",cal_min:3,cal_max:4,controlSection:!0});const t=await m.getVolumeStatistics(e);console.log(`Method ${o} Volume Statistics:`,{Min:t.min.toFixed(4),Max:t.max.toFixed(4),Mean:t.mean.toFixed(4),Median:t.median.toFixed(4),"Std Dev":t.stdDev.toFixed(4),"Q1-Q3":`${t.q1.toFixed(4)} - ${t.q3.toFixed(4)}`}),console.log(`Loaded Method ${o} FD result into panel 3`)}catch(e){console.error(`Error displaying Method ${o} result:`,e)}if(B&&u)try{const e=await m.addFromArray(u,{dimensions:i},`fd3d-method${a}-${s}-${C}`);await c.load(e,B,{colormap:"nih",cal_min:3,cal_max:4,controlSection:!0});const t=await m.getVolumeStatistics(e);console.log(`Method ${a} Volume Statistics:`,{Min:t.min.toFixed(4),Max:t.max.toFixed(4),Mean:t.mean.toFixed(4),Median:t.median.toFixed(4),"Std Dev":t.stdDev.toFixed(4),"Q1-Q3":`${t.q1.toFixed(4)} - ${t.q3.toFixed(4)}`}),console.log(`Loaded Method ${a} FD result into panel 4`)}catch(e){console.error(`Error displaying Method ${a} result:`,e)}if(E&&u&&g)try{const e=new Float32Array(u.length);for(let F=0;F<u.length;F++)e[F]=u[F]-g[F];const t=await m.addFromArray(e,{dimensions:i},`fd3d-diff-method${a}-method${o}-${s}`),O={R:[255,255,0],G:[0,255,0],B:[0,255,255],A:[255,255,255],I:[0,128,255],name:"myCustomMap",levels:[0,.5,1]},h=await c.load(t,E,{cal_min:-.5,cal_max:.5,controlSection:!0});h&&(h.addColormap("myCustomMap",O),h.volumes?.[0]&&(h.volumes[0].colormap="myCustomMap",h.updateGLVolume()));const r=await m.getVolumeStatistics(t);console.log("Difference Volume Statistics:",{Min:r.min.toFixed(4),Max:r.max.toFixed(4),Mean:r.mean.toFixed(4),Median:r.median.toFixed(4),"Std Dev":r.stdDev.toFixed(4),"Q1-Q3":`${r.q1.toFixed(4)} - ${r.q3.toFixed(4)}`}),console.log("Loaded difference volume into panel 2"),console.log(`Loaded difference volume (Method ${a} - Method ${o}) into panel 2`)}catch(e){console.error("Error calculating or displaying difference volume:",e)}})},async setupFd3dGrid(){const n=await R({},{enableDragDrop:!1,enableClick:!1});return n.forEach(d=>{d&&d.panel&&d.panel.setAttribute("data-no-controls","true")}),n},async createFd3dPanel(n,d={}){const l={enableDragDrop:!1,enableClick:!1,...d},p=await createStyledPanel(n,l);return!p||!p.panel?(console.error(`Failed to create fd3d panel ${n}`),null):p.panel}},J=G.handleFd3d.bind(G);export{J as handleFd3d};
